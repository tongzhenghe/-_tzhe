<?php/** * Created by PhpStorm. * User: Administrator * Date: 2019/4/1 * Time: 19:07 */namespace app\index\controller;use app\extra\Upload;use app\index\model\User;use app\index\model\Wechat;use Doctrine\Common\Cache\XcacheCache;use think\Console;use think\Db;use app\index\model\Sign;use \app\index\model\Index as IndexModel;use think\Session;use Workerman\Lib\Timer;class Index extends Common{    private $user;//这里声明    public function _initialize() {        $this->user =  User::activeUserInfoOrFail();    }    //home    public function index_action()    {        return view();    }    public  function tyapproval()    {        if( request()->isAjax()) {            $params = request()->param();            if ($params['do'] == 'app_pro') {                if (empty($params['content']))                    exit(iJson('', 400,  false, '请填写审批内容！'));                if (empty($params['detail']))                    exit(iJson('', 400,  false, '请填写审批详情！'));               if (empty($params['app_men']) || !is_array($params['app_men']))                    exit(iJson('', 400,  false, '请选择审批人员！'));                $images =  !empty($params['img'] )?  serialize($params['img']) : null;                $person_cs =  !empty($params['person_cs']) ?  serialize($params['person_cs']) : null;                $data = Db::name('user')->where('id',  $this->user['id'])->field('department_id')->find();                Db::startTrans();                try{                    $app_data = [                        'compid' => intval( $this->user['compid'])                        ,'appnum' => date('YmdHis', time()).rand(1111, 9999999)                        ,'content' =>  trim($params['content'])                        ,'detail' => trim($params['detail'])                        ,'images' => $images                        ,'send_user_id' => intval( $this->user['id']  ) //发起人                        ,'approval_user_id' => serialize($params['app_men'])                        ,'send_department_id' => intval($data['department_id'])                        ,'know_user_id' => $person_cs                        ,'see_state' => 2                        ,'approval_state' => 1                        ,'is_del' => 1                        ,'create_time' => time()                        ,'appro_title' => '通用审批'                    ];                    $result = Db::name('general_approval')->insert($app_data);                    if (!empty($result)) {                        //审批人处理                        $app_men = $params['app_men'];                        if (!is_array($app_men)) exit(false);                        $generalId = Db::name('general_approval')->getLastInsID();                        foreach ($app_men as $key => $val) {                            //生成状态数据                            $state_data = [                                'compid' =>  intval($this->user['compid'])                                ,'state' => 4                                ,'appro_user_id' =>  intval($val)                                ,'approval_id' => intval($generalId)                                ,'appro_sort' => intval($key)+1                                ,'reject_reason' => ''                            ];                            Db::name('appprostate')->insert($state_data);                            //记录log                            User::insert_log(  $this->user, $this->user['user_name'] . '新增一条审批');//                            $users = Db::name('user')->where('id', intval($val))->field('tel')->find();//                            $templateid = '461248';//                            \Ucpaas::SendSms($templateid, $users['tel']);                        }                    }                    // 提交事务                    Db::commit();                    //微信服务消息提醒                    exit(iJson(url('/index/personal')));                } catch (\Exception $e) {                    // 回滚事务                    Db::rollback();                }            }        }        //部门员工        $department_user = Db::name('department')->where(['compid'=> $this->user['compid'], 'is_del' => 1, 'state' => 1 ])->select();        foreach ($department_user as &$val ) {            $val['children'] = Db::name('user')->where(['department_id' => $val['id'], 'compid' => $this->user['compid'] , 'is_del' => 1, 'state' => 1 ])->select();        }        /*抄送*/        $this->user = Db::name('user')->where(['compid' => $this->user['compid'], 'is_perfect' => 1])->field('id, user_name')->select();        $settlesRes = [];        foreach ($this->user as $sett) {            $user_nameFirstChar = _getFirstCharter($sett['user_name']); //取出的第一个汉字的首字母            $settlesRes[$user_nameFirstChar][] = $sett; //以这个首字母作为key        }        ksort($settlesRes);        foreach(range('A','Z') as &$v) {            $letter[] = $v;        }        return view('', [            'settlesRes' => $settlesRes            , 'letter' => $letter            ,'department_user' => $department_user        ]);    }    /**     * 我发起list     * @return \think\response\View     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function mysendlist()    {        //所有的发起人审批列表        $approval_list = Db::name('general_approval')->where(['send_user_id' => intval( $this->user['id']), 'compid' =>  $this->user['compid']])->field('id, content, detail, create_time,appro_title')->select();        //所需要的字段        //username, 申请内容， 申请详情， 目前审批中的所在人： 先通过审批id查询所有审批状态表里面的所有审批人， 当用户的sort ==1 && 状态为无效，|| 当这个人不等4 && 状态为审批中就查出此人；       foreach ( $approval_list as &$val ) {           $val['create_time'] = timeTran($val['create_time'] );           $val['content'] = utf8_sub_str($val['content'], 0, 15 );           $val['detail'] =  utf8_sub_str($val['detail'], 0, 15);           //发起人           $val['user_name'] =  $this->user['user_name'];           //所有审批人           $approval_user  = Db::name('appprostate')->where(['approval_id'=> $val['id'],  'compid' =>  $this->user['compid']])->select();           //获取当前审批人           $sort = [];           foreach($approval_user as &$val2 ) {               $sort[] = $val2['appro_sort'];               $max_sort = max($sort);               //当前正在审批的               if (($val2['state'] == 4 && $val2['appro_sort'] == 1) || ($val2['state'] == 1  && $val2['appro_sort'] != 1) ) {                   $user_apping = Db::name('user')->where(['id' => $val2['appro_user_id'], 'compid' => $this->user['compid']])->field('user_name, tel')->find();                   $val['wait_user'] = $user_apping;               } elseif ($val2['state'] == 3 ) {                   $reject_user = Db::name('user')->where(['id' => $val2['appro_user_id'], 'compid' => $this->user['compid']])->field('user_name')->find();                   $val['reject_user'] = $reject_user;               }           }           $end_pro_user = Db::name('appprostate')->where(['compid' =>  $this->user['compid'], 'approval_id' => $val['id'], 'appro_sort' =>  $max_sort])->field('state')->find();           $val['end_pro_user'] = $end_pro_user;       }        //抄送人： 对于单条审批数据， 和单个发送人  ： 当全部通过后， 改变大表里面的审批状态： 为2 ； 同时 ；：如果为2， 就通知抄送人 全部通过后通知抄送人：        return view('' , ['approval_list' => $approval_list]);    }    /**     * 我发起的内容    * @return bool|\think\response\View    * @throws \think\db\exception\DataNotFoundException    * @throws \think\db\exception\ModelNotFoundException    * @throws \think\exception\DbException    */    public function mysendinfo()    {        if (request()->param()) {           $params = request()->param();           if (empty($params['id'])) return false;           $approval_info = Db::name('general_approval')->where(['id'=> intval($params['id']), 'compid' => $this->user['compid']])->find();           //所需：发起人， 审批编号， 所在部门， 申请内容， 申请详情， 图片，  ===申请人员列表---》====            $approval_info['send_user_name'] = $this->user['user_name'];//发起人            $approval_info['create_time'] = timeTran( $approval_info['create_time']);//发起人            $know_user_id_arr  = unserialize( $approval_info['know_user_id']);//发起人            //抄送人            if ( is_array($know_user_id_arr) && !empty($know_user_id_arr) ) {                foreach ($know_user_id_arr as &$uid ) {                    $know_user = Db::name('user')                        ->where(['id' => $uid, 'compid' => $this->user['compid']])->field('user_name, id, photo')->find();                    $approval_info['know_user'][] = $know_user;//抄送人                }            };            //发起人所在部门: 根据发起人user_id 从user表获取部门            $department = Db::name('user a')->join('department b', 'a.department_id = b.id', 'RIGHT')->where(['a.id' => $this->user['id'], 'a.compid' => $this->user['compid']])->field('b.name')->find();            $approval_info['department_name'] = trim($department['name']);//发起人部门            $approval_info['images'] = unserialize($approval_info['images']);//审批文件            //审批人员： 根据审批id获取所有参与审批人员，            $apping_user = Db::name('appprostate a ')                ->join('general_approval b', 'a.approval_id = b.id', 'LEFT')                ->where(['a.compid' => $this->user['compid'], 'a.approval_id'=>$approval_info['id'] ])                ->field('a.appro_user_id, a.appro_sort, a.state, a.agree_reason,a.reject_reason')                ->order('appro_sort ASC')                ->select();            //获取所有审批人员审批顺序            $sort = [];            for($i = 0; $i < count($apping_user); $i++ ) {                $sort[] = $apping_user[$i]['appro_sort'];            }            //根据user_id获取审批人            $color = $state_msg = $wait_time = '';            foreach ($apping_user as &$val ) {                $val['agree_reason'] = \Qiniu\json_decode($val['agree_reason']);                $val['reject_reason'] = \Qiniu\json_decode($val['reject_reason']);                //获取第一个审批人审批等待时间、 审批状态                if ($val['state'] == 1 ) {                    $state_msg = '待审批';                    $color = '#f25643';                    //当前审批人等待时间                } elseif($val['state'] == 2 ){                    $state_msg = '已同意';                    $color = '#4de097';                } elseif ($val['state'] == 3 ) {                    $state_msg = '审批驳回';                    $color = 'red';                } elseif ($val['state'] == 4 && $val['appro_sort'] == 1) {                    $state_msg = '待审批中';                    $color = '#f25643';                    //当前审批人等待时间                    $wait_time = $approval_info['create_time'];                } elseif ($val['state'] == 4 && $val['appro_sort'] !=1 ) {                    $state_msg = '';                }                $user = Db::name('user') ->where(['id'=> $val['appro_user_id'], 'compid' => $this->user['compid']])->find();                $val['user_name'] = $user['user_name'];                $val['state_msg'] = $state_msg;                $val['color'] = $color;                $val['wait_time'] = $wait_time;                $val['sort'] = $sort;                //通过审批                $end_pro_state = Db::name('appprostate')->where([ 'compid' => $this->user['compid'], 'appro_sort' => intval(max($sort)) ])->field('*')->find();                $approval_info['end_pro_state'] = $end_pro_state;            }            $approval_info['wait_user'] = $apping_user;        }        return view('', ['approval_info' => $approval_info]);    }    /**我的审批list     * @return \think\response\View     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public  function myapprolist()    {        //进入我审批的， 展现审批列表：我：等待审批， 我已审批；        //根据user_id 在状态审批表里面获取所有关于我的审批，        // 在通过状态审批表里面获取审批内容， 在通过状态审批表里面判断审批状态；        //等待我审批的        $nowait_appro_list = $wait_appro_list =  [];        $myapprolist = Db::name('appprostate')->where(['appro_user_id' => $this->user['id'], 'compid' => $this->user['compid']])->select();        if (!empty($myapprolist)) {            foreach ($myapprolist as &$val ) {                if (!empty($val['agree_reason'])) {                    $val['agree_reason'] = json_decode($val['agree_reason']);                }                $color = $msg = '';                if ($val['state'] == 3 ) {                    $color = 'red';                    $msg = '审批驳回';                }                $val['color'] = $color;                $val['msg'] = $msg;                //根据状态id 获取审批内容                $appro_content = Db::name('general_approval a')                    ->join('user b', 'a.send_user_id = b.id', 'RIGHT')                    ->field('b.user_name send_user_name, a.content, a.detail, a.create_time, a.id, a.approval_state, a.appro_title')                    ->where(['a.id' => $val['approval_id'], 'a.compid' => $this->user['compid'],'b.compid' => $this->user['compid']])                    ->find();                if (!empty($appro_content)) {                    $appro_content['content'] = utf8_sub_str( $appro_content['content'], 0, 10);                    $appro_content['detail'] = utf8_sub_str( $appro_content['detail'], 0, 15);                    $appro_content['create_time'] = timeTran($appro_content['create_time']);                    $val['appro_content'] = $appro_content;                    if ($val['state'] == 1 || $val['state'] == 5  || ($val['state'] == 4 && $val['appro_sort'] == 1)) { //wait                        //第一个审批人                        $next_apro_user = Db::name('appprostate')->where(['compid' => $this->user['compid'], 'approval_id' => $val['approval_id'], 'appro_sort' => $val['appro_sort']])->find();                        $next_apro_user_name = Db::name('user') ->where(['compid' => $this->user['compid'], 'id' => $next_apro_user['appro_user_id']])->field('user_name')->find();                        $val['next_appro_user_name'] = $next_apro_user_name;                        $val['color'] = '#f25643';                        $wait_appro_list[]  = $val;                    } elseif(!in_array($val['state'], [ 1, 4, 5])) {                        //下一个审批人                        $next_apro_user = Db::name('appprostate')->where(['compid' => $this->user['compid'], 'approval_id' => $val['approval_id'], 'appro_sort' => $val['appro_sort']+1])->find();                        $next_apro_user_name = Db::name('user') ->where(['compid' => $this->user['compid'], 'id' => $next_apro_user['appro_user_id']])->field('user_name')->find();                        $val['next_appro_user_name'] = $next_apro_user_name;                        $nowait_appro_list[]  = $val;//已审批                    }                    //根据当前用户审批文件id， userid， compid 获取所有审批用户的审批状态和用户id，如果里面有状态为3 的就获取                }            }        }        return view('',            [                'wait_appro_list' => $wait_appro_list // 待审批                ,'nowait_appro_list' => $nowait_appro_list//已审批            ]        );    }    /**审批详情     * @return \think\response\View     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public  function  myapproinfo()    {        $params = request()->param();        if (!empty($params)) {            if (empty($params['id'])) return;            $myapproinfo = Db::name('general_approval')->where(['id' => intval( $params['id'] ), 'compid' => intval($this->user['compid'])])->find();            //抄送人            $know_user_id_arr  = unserialize( $myapproinfo['know_user_id']);            if (is_array($know_user_id_arr) && !empty($know_user_id_arr)) {                foreach ($know_user_id_arr as &$uid ) {                    $know_user = Db::name('user')                        ->where(['id' => $uid, 'compid' => $this->user['compid']])                        ->field('user_name, id, photo')->find();                    $myapproinfo['know_user'][] = $know_user;//抄送人                }            }            $myapproinfo['create_time'] = timeTran($myapproinfo['create_time']);            $myapproinfo['images'] = !empty( $myapproinfo['images']) ? unserialize(  $myapproinfo['images']) : null;            $send_user_info = Db::name('user a')                ->join('department b', 'a. department_id = b.id')                ->where(['a.id' => $myapproinfo['send_user_id'], 'a.compid' => $this->user['compid']])                ->field('a.user_name send_user_name, a.tel, b.name department_name')                ->find();            $myapproinfo['send_user_info'] = $send_user_info;            //工资审批            //获取字段：审批编号、 所在部门、 审批明细【标题、类型、 金额、 明细】            $other_app_info = [];            $other_app_info['appro_title'] = $myapproinfo['appro_title'];            if ($myapproinfo['appro_title'] == '工资审批') {                $other_app_info['appnum'] = $myapproinfo['appnum'];                $other_app_info['department_name'] = $send_user_info['department_name'];                //审批明细  根据审批id 获取所有管理工资数据                $other_app_info['rows']  = [];                $other_app_info['rows'] = Db::name('salary a')                    ->join('salary_type b', 'a.typeid=b.id', 'LEFT')                    ->field('a.*, b.name type_name')                    ->order('id asc')                    ->where('a.approvalid', $myapproinfo['id'])->select();                $salary_money_total = '';                foreach ($other_app_info['rows'] as &$v ) {                    if (!empty($v['image']))                        $v['image'] = unserialize($v['image']);                    if (!empty($v['annex']))                        $v['annex'] = unserialize($v['annex']);                    $salary_money_total += $v['salary_money'];                }                if (!empty($salary_money_total))                    $other_app_info['salary_money_total'] = $salary_money_total;            } elseif ( $myapproinfo['appro_title'] == '申购') {                $other_app_info['appnum'] = $myapproinfo['appnum'];                $other_app_info['department_name'] = $send_user_info['department_name'];                //审批明细  根据审批id 获取所有管理工资数据                $other_app_info['rows']  = [];                $other_app_info['rows'] = Db::name('procurement a')                    ->join('procurement_type b', 'a.typeid=b.id', 'LEFT')                    ->field('a.*, b.name type_name')                    ->order('id asc')                    ->where('a.approvalid', $myapproinfo['id'])->select();                $salary_money_total = '';                foreach ($other_app_info['rows'] as &$v ) {                    if (!empty($v['image']))                        $v['image'] = unserialize($v['image']);                    if (!empty($v['annex']))                        $v['annex'] = unserialize($v['annex']);                    $salary_money_total += $v['pro_price'];                }                if (!empty($salary_money_total))                    $other_app_info['pro_price_total'] = $salary_money_total;            }elseif ( $myapproinfo['appro_title'] == '报销') {                $other_app_info['appnum'] = $myapproinfo['appnum'];                $other_app_info['department_name'] = $send_user_info['department_name'];                //审批明细  根据审批id 获取所有管理工资数据                $other_app_info['rows']  = [];                $other_app_info['rows'] = Db::name('reimbursement_group a')                    ->join('reimbursement_type b', 'a.r_typeid=b.id', 'LEFT')                    ->field('a.*, b.name type_name')                    ->order('id asc')                    ->where('a.approvalid', $myapproinfo['id'])->select();                $salary_money_total = '';                foreach ($other_app_info['rows'] as &$v ) {                    if (!empty($v['image']))                        $v['image'] = unserialize($v['image']);                    if (!empty($v['annex']))                        $v['annex'] = unserialize($v['annex']);                    $salary_money_total += $v['r_money'];                }                if (!empty($salary_money_total))                    $other_app_info['rei_price_total'] = $salary_money_total;            }            //获取当前用户对当前审批文件的审核数据            $current_appro = Db::name('appprostate')->where(['compid' => $this->user['compid'], 'appro_user_id' => $this->user['id'], 'approval_id' => $myapproinfo['id']])->find();            $appro_user_list = Db::name('appprostate')->where(['compid' => $this->user['compid'], 'approval_id' => $myapproinfo['id']])->select();            //欠缺数据：当前用户审批状态， 当前文件所有审批人员，        }        if (empty($params['next_appro_user_name'])) $params['next_appro_user_name'] = '';        if ( $this->user['user_name'] == $params['next_appro_user_name'] ) $params['next_appro_user_name'] = '我';        //所有审批用户        $all_pro_user = Db::name('appprostate a')            ->join('user b',  'a.appro_user_id = b.id')            ->field('a.state pro_state, a.appro_sort, a.reject_reason, a.agree_reason,a.approval_id,a.appro_user_id, b.tel, b.user_name, b.photo user_photo')            ->where(['a.compid' => $this->user['compid'], 'a.approval_id' => $myapproinfo['id']])            ->select();        $wait_time = $color = $state_msg = $end_pro_state =  '';        $max_proed_sort = $sort = $appro_uers = [];        foreach ($all_pro_user as $key => &$val ) {            $sort[] = $val['appro_sort'];            if ($val['pro_state'] == 1 ) {                $appro_uers[] = $val['appro_user_id'];                $current_appro['wait_user_tel'] = $val['tel'];                $state_msg = '待审批';                $color = '#f25643';                //当前审批人等待时间            } elseif($val['pro_state'] == 2 ) {                $state_msg = '已同意';                $color = '#4de097';            } elseif ($val['pro_state'] == 3 ) {                $val['reject_reason'] = (array)json_decode($val['reject_reason']);                $val['reject_reason'] = (array)$val['reject_reason'];                $val['reject_reason']['annex'] = (array)$val['reject_reason']['annex'];                $state_msg = '审批驳回';                $color = 'red';            } elseif ($val['pro_state'] == 4 && $val['appro_sort'] == 1) {                $current_appro['wait_user_tel'] = $val['tel'];                $appro_uers[] = $val['appro_user_id'];                $state_msg = '待审批中';                $val['wait_time'] = $wait_time = $myapproinfo['create_time'];                $color = '#f25643';                //当前审批人等待时间            }elseif ($val['pro_state'] == 4 && $val['appro_sort'] !=1 ) {                $state_msg = '';            }            $val['state_msg'] = $state_msg;            $val['color'] = $color;            if ($val['pro_state']    == 2 ) {                $max_proed_sort[] = $val['appro_sort'];                //获取最近已经审批的                $recently_pro = Db::name('appprostate')                    ->where(['appro_sort' => max($max_proed_sort), 'compid' => $this->user['compid'], 'approval_id' => $myapproinfo['id']])                    ->find();                $val['agree_reason'] = (array)json_decode($recently_pro['agree_reason']);                $val['agree_reason']['annex'] = (array)$val['agree_reason']['annex'];               $val['wait_time'] = $wait_time = str_replace('前','',$wait_time);            }        }         //判断是否为当前用户审批all_pro_user        return view('', [            'this_id' =>  $this->user['id']            ,'appro_uers' => $appro_uers            ,'max_sort' => intval(max($sort))            ,'myapproinfo' => $myapproinfo            ,'next_appro_user_name' => $params['next_appro_user_name']            ,'current_appro' => $current_appro            ,'appro_user_list' => $appro_user_list            ,'all_pro_user' => $all_pro_user            //其他多规格审批            ,'other_app_info' => $other_app_info            ]);    }    /**     * 意见提交     * @return bool|\think\response\View     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function  yj()    {        $param = request()->param();        if (empty($param['approval_id']) || empty($param['is_agree']) )   return  false;        //获取当前这个审批人的id， 在获取下一个审批人的id        //根据这个人来获取        //当前审批人 ;        //根据当前审批人获取下一个审批人        //如果同意：改变下一个审批人的状态4-1  同时改变当前审批人的审批状态：4-2        //如果拒绝：当前审批人4-3， 下一个审批人不变        //获取在审批状态表里面的当前用户        //发起人信息        $appro_info = Db::name('general_approval a')            ->join('user b', 'a.send_user_id = b.id')            ->field('b.user_name send_user_name')            ->where(['a.id' => intval($param['approval_id']), 'a.compid' => $this->user['compid']])            ->find();        if (request()->isAjax()) {            if ($param['is_agree'] == 'y') { //同意                if (empty($param['img_file'])) $param['img_file'] = null;                if (empty($param['annex'])) $param['annex'] = null;                $data  = [                    'state' => 2                    ,'agree_reason' => json_encode(['agree_reason' => $param['agree_reason'], 'img_file' => $param['img_file'],  'annex' => ['file' => $param['annex'], 'filename' => $param['annex_filename']], 'pro_time' => time() ])                ];                //获取最大的sort， 并通过pro_id 和compid 、 最大的sort获取 审批状态：                $sort = [];                $appprostatelist =  Db::name('appprostate')->where(['approval_id' => $param['approval_id'], 'compid' => $this->user['compid']])->select();                foreach ( $appprostatelist as &$vals ) {                    $sort[] = $vals['appro_sort'];                }                // 启动事务                Db::startTrans();                try{                    //当前审批用户                    $res = Db::name('appprostate')                        ->where( ['approval_id' => intval($param['approval_id']),                            'compid' => $this->user['compid']                            , 'appro_user_id' => $this->user['id']]                        )                        ->update($data);                    $ens_pro_state  =  Db::name('appprostate')                        ->where(['approval_id' => $param['approval_id']                            , 'compid' => $this->user['compid']                            , 'appro_sort' => intval(max($sort))]                        )                        ->field('state')                        ->find();                    if ( $ens_pro_state['state'] ==  2 ) {                        //改变大表的状态为2                        Db::name('general_approval')                            ->where(['compid' => $this->user['compid']                                , 'id' => $param['approval_id']])                            ->update(['approval_state' => 2]);                    }                    //改变下一个审批用户审批平状态                    $current_appro_user = Db::name('appprostate')                        ->where( ['approval_id' => intval($param['approval_id'])                            , 'compid' => $this->user['compid']                            , 'appro_user_id' => $this->user['id']] )                        ->find();                    //此处判断是否已经到最后一位审批人审批？                    $end_user = Db::name('appprostate')                        ->where(['compid' => $this->user['compid']                            , 'approval_id' => $param['approval_id']                            , 'appro_sort' => $current_appro_user['appro_sort'] + 1])                        ->field('id')                        ->find();                    $next_appro_user = '';                    if (!empty($end_user)) {                        $next_res = Db::name('appprostate')                            ->where( ['approval_id' => intval($param['approval_id'])                                , 'compid' => $this->user['compid']                                , 'appro_sort' => $current_appro_user['appro_sort']+1] )                            ->update(['state' => 1 ]);                        if ($res && $next_res) {                            //log                            User::insert_log($this->user,  $this->user['user_name'] . '同意了'. $appro_info['send_user_name'] . '的审批');                            //获取下一个审批人员                            $next_appro = Db::name('appprostate a')                                ->join('user b', 'a.appro_user_id = b.id', 'RIGHT')                                ->where(['approval_id' => $param['approval_id'], 'appro_sort' => $current_appro_user['appro_sort'] + 1])                                ->field('b.user_name')                                ->find();                            $next_appro_user = $next_appro['user_name'];                            Db::commit();                        }                    }                    //是否短信通知                  /*  if ($param['short_message'] == 1 ) {                        //发送短信                    }*/                    //下一审批人员为空： 改变审批大表状态，                    if($res)  Db::commit();                    exit(iJson(url('/index/myapproinfo' , ['id' => $param['approval_id'], 'next_appro_user_name' => $next_appro_user]), 200, true, '提交成功'));                } catch (\Exception $e) {                    // 回滚事务                    Db::rollback();                }            }            //拒绝///////////////////////////////////////////////////////////////////////            // 当用户拒绝时：根据审批条数id， 和user_id 获取审批状态表里面的这条数据， -》改变审批状态1-》3  改变审批表里面的审批状态为3；            //当大表里面的状态为3（驳回）时， 将终止审批;            if (empty($param['img'])) $param['img'] = null;            $data  = [                'state' => 3                ,'reject_reason' => json_encode(['reject_reason' => $param['reject_reason'], 'img_file' => $param['img_file'],  'annex' => ['file' => $param['annex'], 'filename' => $param['annex_filename']], 'pro_time' => time()]) //拒绝            ];            Db::startTrans();            try{                 Db::name('appprostate')                    ->where( ['approval_id' => intval($param['approval_id'])                            ,'compid' => $this->user['compid']                            , 'appro_user_id' => $this->user['id']]                    )                    ->update($data);                Db::name('general_approval')                    ->where(['id' => intval($param['approval_id'])                        , 'compid' => $this->user['compid']])                    ->update(['approval_state' => 3]);                User::insert_log($this->user,  $this->user['user_name'] . '拒绝了'. $appro_info['send_user_name'] . '的审批');                // 提交事务                Db::commit();                exit(iJson(url('/index/myapproinfo' , ['id' => $param['approval_id']]), 200, true, '提交成功'));            } catch (\Exception $e) {                // 回滚事务                Db::rollback();            }        }        return view('', ['approval_id' => $param['approval_id'], 'is_agree' => $param['is_agree'], 'send_user_name' => $appro_info['send_user_name']]);    }    /**     * 抄送     */    public  function mycslist()    {        //抄送我的：已知user-id，compid        $appro_list = Db::name('general_approval')->where(['compid' => $this->user['compid']])            ->field('id, know_user_id, approval_state')            ->select();        $current_appro_id = $self_appro_list = $param['send_user_name'] = [];        foreach ($appro_list as &$val ) {            //筛选当前用户的user审批数据            $val['know_user_id'] = unserialize(  $val['know_user_id'] );            if (!empty( $val['know_user_id'])) {                if (in_array($this->user['id'], $val['know_user_id'])) {                    $current_appro_id[] = $val['id'];                }            }        }        foreach ($current_appro_id as &$appro_id ) {            $self_appro_list[] = Db::name('general_approval a')                ->join('user b', 'a.send_user_id = b.id')                ->where(['a.compid' => $this->user['compid'], 'a.id' => $appro_id])                ->field('a.id, a.create_time, a.content, a.detail, b.user_name send_user_name')                ->find();        }        foreach ($self_appro_list as &$val) {            $val['content'] = utf8_sub_str($val['content'], 0, 15);            $val['detail'] = utf8_sub_str($val['detail'], 0, 15);            $val['create_time'] = timeTran( $val['create_time']);        }        //详情        $param = request()->param();        $detail['current_pro_user'] = '';        if (!empty($param['point']) && $param['point'] == 'detail') {            if (empty($param['id'])) return false;            $detail = Db::name('general_approval a')                ->join('department b', 'a.send_department_id = b.id')                ->where(['a.id' => intval($param['id'])])                ->field('a.appnum,a.create_time, a.content,a.detail, a.approval_state,a.images,a.create_time,a.know_user_id, b.name send_department_name')                ->find();            if (!empty($detail['images']))                $detail['images'] =  unserialize($detail['images']);            $detail['create_time'] = timeTran( $detail['create_time']);            //抄送人：            $detail['know_user_id'] = unserialize($detail['know_user_id']);            $detail['all_cs_user'] = [];            foreach ( $detail['know_user_id'] as &$user_id ) {                $detail['all_cs_user'][] = Db::name('user')                    ->where(['id' => $user_id, 'compid' => $this->user['compid']])                    ->field('id, user_name cs_user_name, photo')                    ->find();            }            $max_sort = [];            //根据此条审批数据id和compid获取所有审批人            $all_pro_user = Db::name('appprostate a')                ->join('user b', 'a.appro_user_id = b.id')                ->field('a.*, b.user_name pro_user_name')                ->where(['a.compid' => $this->user['compid'], 'a.approval_id' => $param['id']])                ->select();            $state_msg = $color = $wait_time = '';            foreach ($all_pro_user as &$val_s ) {                $max_sort[] = $val_s['appro_sort'];                if (($val_s['state'] == 4 && $val_s['appro_sort'] == 1) || $val_s['state']  == 1) {                    $appro_user_id = $val_s['appro_user_id'];                    $current_pro_user = Db::name('user')                        ->where(['compid' => $this->user['compid'], 'id' => $appro_user_id])                        ->field('user_name')                        ->find();                }                if ($val_s['state'] == 1 ) {                    $state_msg = '待审批';                    $color = '#f25643';                    //当前审批人等待时间                } elseif($val_s['state'] == 2 ) {                    $state_msg = '已同意';                    $color = '#4de097';                } elseif ($val_s['state'] == 3 ) {                    $state_msg = '审批驳回';                    $color = 'red';                } elseif ($val_s['state'] == 4 && $val_s['appro_sort'] == 1) {                    $state_msg = '待审批中';                    $wait_time = ($detail['create_time']);                    $color = '#f25643';                    //当前审批人等待时间                } elseif ($val_s['state'] == 4 && $val_s['appro_sort'] != 1) {                    $state_msg = '';                    $color = '';                    //当前审批人等待时间                }                $val_s['color'] = $color;                $val_s['wait_time'] = $wait_time;                $val_s['state_msg'] = $state_msg;                if (!empty($val_s['reject_reason'])) {                    $val_s['reject_reason'] = \Qiniu\json_decode($val_s['reject_reason']);                }                if (!empty($val_s['agree_reason'])) {                    $val_s['agree_reason'] = \Qiniu\json_decode($val_s['agree_reason']);                }            }            $detail['all_pro_user'] = $all_pro_user;            return view( 'mycsinfo'                , ['detail' => $detail                , 'max_sort' =>$max_sort                ,  'send_user_name'  => $param['send_user_name']            ]);        }        return view('', ['self_appro_list' => $self_appro_list]);    }    /**     * @return \think\response\View     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public  function  perfect()    {        if (request()->isAjax()) {            $params = request()->param();            if (empty($params['photo']))                exit(iJson('', 400,  false, '请上传您美美哒头像！'));            if (empty($params['sex']))                exit(iJson('', 400,  false, '请确认您的性别！'));            if (empty($params['department_id']))                exit(iJson('', 400,  false, '请选择您的所属部门！'));            $data = [                'is_perfect' => 1                ,'photo' => trim($params['photo'])                ,'sex' => intval($params['sex'])                ,'birth' => $params['birth']                ,'department_id' => intval($params['department_id'])                ,'remarks' => trim($params['remarks'])            ];            //更新数据            $result = Db::name('user')->where('id',intval($this->user['id']))->update($data);            if (true == $result) exit(iJson(url('/index/personal'), 200, true, '提交成功'));//进入个人中心        }        //获取部门        $dep_table =  'department';        $department = Db::name($dep_table)->where(['is_del'=> 1, 'compid' => $this->user['compid']] )->field('name, id')->select();        $y = date('Y', time());        $m = date('m', time());        $d = date('d', time());        return view('', [            'department' => $department            , 'y' => $y            , 'm' => $m            ,'d' => $d            ]);    }    //个人中心    public  function personal()    {        $user_table = 'user';        $table = 'department';        //data        $user = Db::name($user_table. ' a')            ->join($table. ' b', 'a.department_id = b.id')            ->where(['a.is_del'=> 1 , 'a.compid' => 3])            ->select();        $self_send_num = $self_pro_num = [];        $my_pro_num = Db::name('appprostate')            ->where(['appro_user_id' => $this->user['id'], 'compid' => $this->user['compid']])            ->field('id,state, appro_sort')            ->select();        foreach ($my_pro_num as &$val ){            if (($val['state'] == 4 && $val['appro_sort'] == 1) || $val['state'] == 1  ) {                $self_pro_num[] = $val;            }        }        //抄送我的        $appro_list = Db::name('general_approval')->where(['compid' => $this->user['compid']])->field('id, know_user_id')->select();        $current_appro_id = [];        foreach ($appro_list as &$val ) {            //筛选当前用户的user审批数据            $val['know_user_id'] = unserialize(  $val['know_user_id'] );            if (!empty( $val['know_user_id'])) {                if (in_array($this->user['id'], $val['know_user_id'])) {                    $current_appro_id[] = $val['id'];                }            }        }        $self_apppro = Db::name('general_approval')->field('count(id) count')->where(['send_user_id' => $this->user['id'], 'compid' => $this->user['compid']])->where('approval_state', '<>', '2')->find();        //个人中心        //获取当前用户审批信息        $user_info = Db::name('user a')            ->join('company b', 'a.compid = b.id')            ->join('department c', 'a.department_id = c.id', 'LEFT')            ->where(['a.compid' => $this->user['compid'], 'a.id' => $this->user['id']])            ->field('a.user_name, a.photo, a.sex, a.birth, a.tel, a.remarks, b.comname, c.name department_name')            ->find();        //模块        $modules = Db::name('module')->where(['state'=> 1, 'compid' =>$this->user['compid']])->field('pid, id, name, url')->select();        foreach ($modules as &$v) {            $v['url'] = base64_encode($v['url']);        }        $modules = _reSort($modules);        return view('', [            'modules' => $modules           , 'user_info' => $user_info            ,'self_pro_num' => count($self_pro_num)            ,'self_appro_num' =>intval( $self_apppro['count'])            ,'mycs_num' => count($current_appro_id)        ]);    }    public  function userlist()    {        //部门员工        $department_user = Db::name('department')->where(['compid'=> $this->user['compid'], 'is_del' => 1, 'state' => 1 ])->select();        foreach ($department_user as &$val ) {            $val['children'] = Db::name('user')->where(['department_id' => $val['id'], 'compid' => $this->user['compid'] , 'is_del' => 1, 'state' => 1 ])->select();        }        /*抄送*/        $this->user = Db::name('user')->where(['compid' => $this->user['compid'], 'is_perfect' => 1])->field('id, tel, user_name')->select();        $settlesRes = [];        foreach ($this->user as $sett) {            $user_nameFirstChar = _getFirstCharter($sett['user_name']); //取出的第一个汉字的首字母            $settlesRes[$user_nameFirstChar][] = $sett; //以这个首字母作为key        }        ksort($settlesRes);        foreach(range('A','Z') as &$v) {            $letter[] = $v;        }        return view('', [            'settlesRes' => $settlesRes            , 'letter' => $letter            ,'department_user' => $department_user        ]);    }    //help    public  function help()    {        return view();    }    //公司信息    public  function  aboutus()    {        $company_info = Db::name('company')->where(['id' => $this->user['compid']])->find();        $company_info['intro'] = unserialize($company_info['intro']);        return view('', ['company_info' => $company_info]);    }    /**     * @return \think\response\View     */    public  function account_set()    {        $params = request()->param();        if (request()->isAjax()) {            if (empty($params['uid']) ||( intval($params['uid']) !== intval($this->user['id'])))                exit( false );            if (!empty($params['new_password'])) {                if (md5( $params['new_password'] ) == $this->user['password'])                    exit(iJson('', 400,  false, '新密码与不能原密码相同'));                if (strlen($params['new_password']) < 5 )                    exit(iJson('', 400,  false, '新密码太短了'));                if ( preg_match("/ /",$params['new_password']))                    exit(iJson('', 400,  false, '格式不正确'));                if (empty($params['renew_password']) ||  preg_match("/ /",$params['renew_password']))                    exit(iJson('', 400,  false, '确认新密码为空/格式不正确'));                if (empty($params['old_password']))                    exit(iJson('', 400,  false, '旧密码为空'));                if ($params['new_password'] !== $params['renew_password'] )                    exit(iJson('', 400,  false, '两次填写密码不一致'));                //验证旧密码                if (md5($params['old_password']) !== $this->user['password'])                    exit(iJson('', 400,  false,' 旧密码不正确'));            }            if (empty($params['icon']))                exit(iJson('', 400,  false, '请上传头像'));            if (empty($params['sex']))                exit(iJson('', 400,  false, '请选择性别'));            if (empty($params['tel']) || !preg_match("/^1[34578]\d{9}$/", $params['tel']))                exit(iJson('', 400,  false, '联系方式为空/格式不正确'));            if (empty($params['department_id']))                exit(iJson('', 400,  false, '请选择所属部门'));            $data = [                'password' => !empty($params['new_password']) ? md5($params['new_password']) : $this->user['password']                ,'photo' => trim($params['icon'])                ,'sex' => intval($params['sex'])                ,'tel' => trim($params['tel'])                ,'department_id' => intval($params['department_id'])                ,'remarks' => $params['remarks']                ,'time' => time()            ];            $result = Db::name('user')->where(['id' => $params['uid'], 'compid' => $this->user['compid']])->update($data);            if (true == $result) {                //记录log                if (!empty($params['new_password'])) {                    User::insert_log(  $this->user, $this->user['user_name'] . '修改个人登陆信息');                    Sign::clearSignInfo();                    exit(iJson(url('sign/signin'), 200, true, '提交成功'));                }                $user = Db::name('user')->where(['compid' => $this->user['compid'], 'id' => $this->user['id']])->find();                Sign::clearSignInfo();                Sign::setUserInfo( $user );                User::insert_log(  $this->user, $this->user['user_name'] . '更新个人基本信息');                exit(iJson(url('/index/personal'), 200, true, '提交成功'));            }        }        //调取当前用户信息        //旧密码  新密码；  确认新密码； 个人简介  个人头像        $user_info = Db::name('user')->where('id', $this->user['id'])->find();        //该公司所有部门        $department = Db::name('department')            ->where(['compid' => $this->user['compid'], 'state' => 1 , 'is_del' => 1 ])            ->field('name, id')            ->select();        return view('', ['user_info' => $user_info, 'department' => $department]);    }    /**     *  上传图片组件     */    public function  uploads()    {        if ( $_FILES ) {            Upload::image($_FILES['file']);        }    }        /**     *  上传文件组件     */    public function  nopic()    {        if ( $_FILES ) {            Upload::uploadNopic($_FILES['file']);        }    }public  function tests(){    //列出a-z， 然后查出所有数据，获取用户名首字母， 如果首字母与理出来的字母相等就添加进去    $user = Db::name('user')->field('id, user_name')->select();    //根据名称第一个汉字的首字母正序排序    $settlesRes = [];    foreach ($user as $sett) {        $user_nameFirstChar = _getFirstCharter($sett['user_name']); //取出门店的第一个汉字的首字母        $settlesRes[$user_nameFirstChar][] = $sett; //以这个首字母作为key    }    ksort($settlesRes);    foreach(range('A','Z') as &$v){      $letter[] = $v;    }    return view('', ['settlesRes' => $settlesRes, 'letter' => $letter]);}//审批大表表单public  function  approval_form(){    //接受url    $params = request()->param();    $session_d = '';    if (empty( $params['session_d'])) {        // 防止表单重复提交        $session_d = IndexModel::randNum();        Session::set('session_d', $session_d);    }    $urlArr = ['/index/userlist', '/index/tyapproval'];    if (in_array(base64_decode($params['url']), $urlArr)) {        $re_url = base64_decode($params['url']);        echo "<script>window.location.href = '{$re_url}';</script>";    }    if (empty($params['url']) || empty($params['module_name'])  ) return false;    if (request()->isAjax()) {        //判断session值        $session_d = $params['session_d'];        $local_token = Session::get('session_d');        if ($local_token !== $session_d) {            exit(iJson('', 400,  false, '已提交！'));        }        $user = Db::name('user')->where('id',  $this->user['id'])->field('department_id')->find();        if (empty($params['app_people']) || !is_array($params['app_people']))            exit(iJson('', 400,  false, '请选择审批人员！'));        $cs_people =  !empty($params['cs_people']) ?  serialize($params['cs_people']) : null;        $app_data = [            'compid' => $this->user['compid']            ,'appnum' => IndexModel::randNum()            ,'send_department_id'   => $user['department_id']            ,'send_user_id' => intval($this->user['id']) //发起人            ,'approval_user_id' => serialize($params['app_people']) //审批人            ,'know_user_id' => $cs_people //抄送人            ,'see_state' => 2 //查看状态            ,'approval_state' => 1  //初始化审批            ,'is_del' => 1            ,'create_time' =>time()            ,'appro_title' => trim($params['module_name'])        ];        $result = Db::name('general_approval')->insert($app_data);        if (!empty($result)) {            //审批人处理            $app_people = $params['app_people'];            if (!is_array($app_people)) exit(false);            $generalId = Db::name('general_approval')->getLastInsID();            foreach ($app_people as $key => $val) {                //生成状态数据                $state_data = [                    'compid' =>  intval($this->user['compid'])                    ,'state' => 4                    ,'appro_user_id' =>  intval($val)                    ,'approval_id' => intval($generalId)                    ,'appro_sort' => intval($key)+1                    ,'reject_reason' => ''                ];                Db::name('appprostate')->insert($state_data);            }            //记录log            User::insert_log(  $this->user, $this->user['user_name'] . '新增一条报销单');            //删除session            Session::delete('session_d');            //下一步            exit(iJson(url(base64_decode($params['url']).'/generalId/'.$generalId)));        }    }    $data = IndexModel::getProAllUser();    return view('index/include/approval_form',[        'settlesRes' => $data['settlesRes']        , 'letter' => $data['letter']        ,'department_user' => $data['department_user']        ,'url' => $params['url']        ,'module_name' => $params['module_name']        ,'session_d' => $session_d    ]);}//财务--报销public  function  reimbursement(){    //报销方式    $reimbursement_type =  Db::name('reimbursement_type')        ->where(['state' =>  1, 'compid' =>$this->user['compid'] ])        ->field('id, name')        ->order('sort asc')        ->select();    $params = request()->param();    if (request()->isAjax()) {        if (empty($params['title']))  exit(iJson('', 400,  false, '请输入摘要'));        if (empty($params['r_money']))  exit(iJson('', 400,  false, '请输入报销金额'));        if (empty($params['r_company']))  exit(iJson('', 400,  false, '请输入开票单位'));        if (empty($params['r_typeid']))  exit(iJson('', 400,  false, '请选择报销方式'));        if (empty($params['r_date']))  $params['r_date'] = time();        if (empty($params['intro']))  $params['intro'] = null;        if (empty($params['image']))  $params['image'] = null;        //附件        $nopic = [];        if (!empty($params['nopic'])) {            for ($i = 0; $i < count($params['nopic']); $i++) {                $params['nopic'][$i] = explode('|',   $params['nopic'][$i]);                $nopic[] =  [ 'file' => $params['nopic'][$i][0], 'filename' => $params['nopic'][$i][1]];            }        }        //报销表        $data2 = [            'r_money' => trim($params['r_money'])            ,'compid' => $this->user['compid']            ,'approvalid' => intval($params['generalId'])            ,'r_date' => strtotime($params['r_date'])            ,'image' => serialize($params['image'])            ,'annex' => serialize($nopic) //附件            ,'r_typeid' => intval($params['r_typeid']) // 报销方式            ,'r_company' => trim($params['r_company']) // 开票单位            ,'title' => trim($params['title']) //摘要            ,'intro' => trim($params['intro']) //明细简介            ,'time' => time()        ];       $result = Db::name('reimbursement_group')->insert($data2);        if (!empty($result))            exit(iJson(url()));;    }    return view('', [        'reimbursement_type' => $reimbursement_type        ,'generalId' => $params['generalId']    ]);}    /*工资*/    public  function  salary()    {        $params = request()->param();        if (request()->isAjax()) {            if (empty($params['title']))  exit(iJson('', 400,  false, '请输入标题'));            if (empty($params['salary_money']))  exit(iJson('', 400,  false, '请输入金额'));            if (empty($params['typeid']))  exit(iJson('', 400,  false, '请选择工资类型'));            if (empty($params['intro'])) $params['intro'] = null;            $params['image'] = empty($params['image']) ? null : serialize($params['image']);            $nopic = [];            if (!empty($params['nopic'])) {                for ($i = 0; $i < count($params['nopic']); $i++) {                    $params['nopic'][$i] = explode('|',   $params['nopic'][$i]);                    $nopic[] =  [ 'file' => $params['nopic'][$i][0], 'filename' => $params['nopic'][$i][1]];                }            }            $data = [                'compid' => $this->user['compid']                ,'title' => trim($params['title'])                ,'typeid' => intval($params['typeid'])                ,'approvalid' => intval($params['generalId'])                ,'salary_money' => $params['salary_money']                ,'intro' => $params['intro']                ,'image' => empty($params['image']) ? null : serialize($params['image'])                ,'annex' => serialize($nopic) //附件            ];            $result = Db::name('salary')->insert($data);            if (!empty($result))                exit(iJson(url()));;        }        $type = 'salary_type';        $salary_type = Db::name($type)->where('state', 1)->order('sort asc')->select();        return view('', ['salary_type' => $salary_type, 'generalId' => $params['generalId']]);    }    /**/    public  function  procurement()    {        $params = request()->param();        if (!empty($params)) {            if (request()->isAjax()) {                if (empty($params['name']))  exit(iJson('', 400,  false, '请输入名称'));                if (empty($params['unit']))  exit(iJson('', 400,  false, '请输入单位'));                if (empty($params['pro_price']))  exit(iJson('', 400,  false, '请输入价格'));                if (empty($params['typeid']))  exit(iJson('', 400,  false, '请选择类型'));                if (empty($params['num']))  exit(iJson('', 400,  false, '请输入数量'));                if (empty($params['payTypeId']))  exit(iJson('', 400,  false, '请选择支付方式'));                $nopic = [];                if (!empty($params['nopic'])) {                    for ($i = 0; $i < count($params['nopic']); $i++) {                        $params['nopic'][$i] = explode('|',   $params['nopic'][$i]);                        $nopic[] =  [ 'file' => $params['nopic'][$i][0], 'filename' => $params['nopic'][$i][1]];                    }                }                $data = [                    'name' => "测试申购"                    ,'payTypeId' => intval("2")                    ,'specs' => empty($params['specs']) ? null : trim("15.5/个")                    ,'unit' => trim($params['unit'])                    ,'typeid' => intval("3") //报销方式                    ,'num' => intval("3") //申报数                    ,'pro_price' => trim("135.5")                    ,'compid' => intval($this->user['compid'])                    ,'pro_date' => empty($params['pro_date']) ? time() : strtotime("2")                    ,'use_add' => empty($params['use_add']) ? null : trim("心怡康医院") //用途                    ,'supplier' => empty($params['supplier']) ? null : trim("无") //用途                    ,'intro' => empty($params['intro']) ? null : trim($params['intro']) //明细简介                    ,'annex' => serialize($nopic) //附件                    ,'image' => empty($params['image']) ? null : serialize($params['image'])                    ,'approvalid' => intval($params['generalId'])                ];               $result = Db::name('procurement')->insert($data);                if (!empty($result))                        exit(iJson(url()));            }        }        //类型        $procurement_type  =  Db::name('procurement_type')->field('name, id')->where('state', 1)->select();        //支付方式        $pay_type  =  Db::name('paytype')->order('sort asc')->field('name, id')->where('state', 1)->select();        return view('', [            'procurement_type' => $procurement_type            ,'pay_type' => $pay_type            ,'generalId' => $params['generalId']        ]);    }    /*请求撤回*/    public  function withdraw()    {        $params = request()->param();        if (!empty($params)) {            if (empty($params['approval_id']) || empty($params['approval_type']))                exit(iJson('', 400,  false, '数据不存在！'));            if ($params['approval_type'] == '工资审批') {                // 启动事务                Db::startTrans();                try{                    Db::name('general_approval')->where('id', intval($params['approval_id']))->update(['approval_state' => 5]);                    //改变状态表                    Db::name('appprostate')->where('approval_id',  intval($params['approval_id']))->update(['state' => 5]);                    // 提交事务                    Db::commit();                    exit(iJson('', 200, true, '撤销成功！'));                } catch (\Exception $e) {                    wl_debug_log($e);                    // 回滚事务                    Db::rollback();                }            }        }    }}